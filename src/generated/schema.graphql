### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User
  authorId: String
  comments: [Comment!]!
  content: String!
  createdAt: DateTime!
  deleted: Boolean!
  id: ID!
  level: Int!
  netVotes: Int!
  parentComment: Comment
  parentCommentId: String
  post: Post!
  postId: String!
  score: Float!
  updatedAt: DateTime!
  userVote: UserCommentVote
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Direction {
  DOWN
  UP
}

type Mutation {
  adminCreatePost: Post
  adminNuke: Post
  adminSeed: [Post]
  createComment(input: createCommentInput): Comment
  createPost(input: createPostInput): Post
  createUser: User
  createUserCommentVote(input: createUserCommentVoteInput): UserCommentVote
  createUserPostVote(input: createUserPostVoteInput): UserPostVote
  deleteComment(id: ID): Comment
  deletePost(id: ID): Post
  deleteUser(id: ID): User
  deleteUserCommentVote(commentId: ID): UserCommentVote
  deleteUserPostVote(postId: ID): UserPostVote
  updateComment(input: updateCommentInput): Comment
  updatePost(input: updatePostInput): Post
}

type Post {
  author: User!
  authorId: String
  commentCount: Int
  comments: [Comment!]!
  content: String!
  createdAt: DateTime!
  id: ID!
  link: String!
  netVotes: Int!
  score: Float!
  title: String!
  updatedAt: DateTime!
  userVote: UserPostVote
}

type Query {
  getCommentById(id: ID): Comment
  getComments: [Comment]
  getMe: User
  getPostById(id: ID): Post
  getPosts(sort: Sort): [Post]
  getUser(id: ID): User
  getUsers: [User]
}

enum Sort {
  HOT
  NEW
  TOP
}

"""A User..."""
type User {
  commentVotes: [UserCommentVote!]!
  comments: [Comment!]!
  createdAt: DateTime!
  id: ID!
  postVotes: [UserPostVote!]!
  posts: [Post!]!
  updatedAt: DateTime!
  username: String!
}

type UserCommentVote {
  comment: Comment!
  commentId: String!
  createdAt: DateTime!
  direction: Int!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserPostVote {
  createdAt: DateTime!
  direction: Int!
  post: Post!
  postId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input createCommentInput {
  content: String
  level: Int
  parentCommentId: String
  postId: String!
}

input createPostInput {
  content: String
  link: String
  title: String!
}

input createUserCommentVoteInput {
  commentId: String
  direction: Direction!
}

input createUserPostVoteInput {
  direction: Direction!
  postId: String
}

input updateCommentInput {
  content: String!
  id: ID!
}

input updatePostInput {
  content: String!
  id: ID!
}
