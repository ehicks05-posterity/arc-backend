generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id
  username     String
  createdAt    DateTime          @default(now()) @db.Timestamptz
  updatedAt    DateTime          @updatedAt @db.Timestamptz
  posts        Post[]
  comments     Comment[]
  postVotes    UserPostVote[]
  commentVotes UserCommentVote[]
}

model Post {
  id        String   @id @default(uuid())
  authorId  String?
  content   String
  deleted   Boolean  @default(false)
  netVotes  Int      @default(0)
  score     Float    @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  author   User?          @relation(fields: [authorId], references: [id])
  comments Comment[]
  votes    UserPostVote[]

  // unique to posts
  title String
  link  String

  @@index([score])
  @@index([netVotes])
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(uuid())
  authorId  String?
  content   String
  deleted   Boolean  @default(false)
  netVotes  Int      @default(0)
  score     Float    @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  author   User?             @relation(fields: [authorId], references: [id])
  comments Comment[]         @relation("CommentToComment")
  votes    UserCommentVote[]

  // unique to comments
  post            Post     @relation(fields: [postId], references: [id])
  postId          String
  parentComment   Comment? @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  level           Int      @default(0)
}

model UserPostVote {
  userId    String
  postId    String
  direction Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model UserCommentVote {
  userId    String
  commentId String
  direction Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}
